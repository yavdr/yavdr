#!/bin/bash -p

. /usr/lib/vdr/config-loader.sh

VDR_ENV="LANG=$VDR_LANG LC_ALL=$VDR_LANG"
if [ -n "$VDR_CHARSET_OVERRIDE" ] ; then
   VDR_ENV="$VDR_ENV VDR_CHARSET_OVERRIDE=$VDR_CHARSET_OVERRIDE"
fi

VDRCMD="$VDR_ENV /usr/bin/vdr $*"

function get_modulenames()
{
    MODULES=`lsmod | awk '/^dvb_core/ {gsub(/,/,"\n", $4); print $4}' | tac`
    [ "$MODULES" ] && MODULES="$MODULES dvb_core"
}

function load_dvb_modules()
{
    if [ "$MODULES" ]; then
       for MODULE in $MODULES; do
           modprobe $MODULE >/dev/null 2>&1
       done
    else
       logger -t runvdr "no dvb drivers found, assuming udev would load them"
    fi
    wait `pidof udev`
}

function unload_dvb_modules()
{
    for MODULE in $MODULES; do
        rmmod $MODULE >/dev/null 2>&1
        wait $!
    done
}


VDR_ERR=`mktemp -p /tmp vdr-err.XXXXXX`


[ -z "$MODULES" ] && load_dvb_modules

eval $VDRCMD >/dev/null 2>"$VDR_ERR" &
PID=$!

trap 'kill -INT ${PID} 2> /dev/null' INT EXIT QUIT TERM

wait $PID 

case $? in
        0)
            exit
        ;;
        2)
            ERROR=`cat "$VDR_ERR"`
            logger -t runvdr "stopping after fatal fail ($ERROR)"
            exit
        ;;
        *)
            logger -t runvdr "restarting VDR"
            get_modulenames
            unload_dvb_modules
            sleep 2
            load_dvb_modules
	;;    
esac

