#!/bin/bash
#
#  Copyright notice
#
#  (c) 2010 Gerald Dachs
#  All rights reserved
#
#  This script is part of the yaVDR project. yaVDR is
#  free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  The GNU General Public License can be found at
#  http://www.gnu.org/copyleft/gpl.html.
#  A copy is found in the textfile GPL.txt.
#
#  This script is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#

start_time=$(date +%s)

trap handle_timer ALRM

rm -rf /var/lock/.dvbmon.start_vdr_lock

max_dvb_devices=$(dbget "system.vdr.dvbmon.max_dvb_devices")
if [ -z $max_dvb_devices ]; then
  max_dvb_devices=10
  dbset "system.vdr.dvbmon.max_dvb_devices=$max_dvb_devices"
fi
check_interval=$(dbget "system.vdr.dvbmon.check_interval")
if [ -z $check_interval ]; then
  check_interval=5
  dbset "system.vdr.dvbmon.check_interval=$check_interval"
fi
prerun_device_cnt=$(dbget "system.vdr.dvbmon.device_cnt")
if [ -z $prerun_device_cnt ]; then
  prerun_device_cnt=0
fi
prerun_start_delay=$(dbget "system.vdr.dvbmon.start_delay")
if [ -z $prerun_start_delay ]; then
  prerun_start_delay=0
fi


start_vdr() {
  if mkdir /var/lock/.dvbmon.start_vdr_lock 2>/dev/null; then
    logger -i -s "$0 - trigger vdr start"
  else
    logger -i -s "$0 - vdr already started"
  fi
}

set_timer() { (sleep $1; kill -ALRM $$)& }

handle_timer() {
  logger -i -s "$0 - detection time of previous latest dvb device reached"
  start_vdr
}

if [ $prerun_start_delay -gt 0 ]; then
  set_timer $prerun_start_delay
fi

delay=0
last_start_delay=0
vdr_started=0
last_device_cnt=0

while [ 1 ]; do
  device_cnt=0
  for i in $(seq 0 $(($max_dvb_devices-1))); do
    creation_time=$(stat --printf="%Z" /dev/dvb/adapter$i/frontend0 2>/dev/null)
    if [ $? -eq 0 ]; then
      device_cnt=$(($device_cnt+1))
      delay=$(($creation_time-$start_time))
    fi
  done
  if [ $vdr_started -eq 0 -a $prerun_device_cnt -gt 0 -a $device_cnt -ge $prerun_device_cnt ]; then
    trap "" ALRM
    logger -i -s "$0 - previous device count reached"
    start_vdr
    vdr_started=1
  fi
  if [ $device_cnt -gt 0 -a $device_cnt -ne $last_device_cnt ]; then
    dbset "system.vdr.dvbmon.device_cnt=$device_cnt"
    logger -i -s "$0 - device count changed: detected $device_cnt device(s)"
    last_device_cnt=$device_cnt
  fi
  if [ $delay -gt 0 -a $delay -ne $last_start_delay ]; then
    dbset "system.vdr.dvbmon.start_delay=$delay"
    logger -i -s "$0 - device detected $delay seconds after start"
    last_start_delay=$delay 
  fi
    
  for i in $(seq $check_interval); do
    sleep 1
  done
done
