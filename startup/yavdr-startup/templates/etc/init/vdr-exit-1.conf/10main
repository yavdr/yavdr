description     "Reload driver on vdr exist status 1"
author          "Steffen Barszus <steffenbpunkt@gmail.com"

start on stopped vdr RESULT=failed EXIT_STATUS=1

task

script
# make sure vdr is stopped else we wait forever
stop vdr || /bin/true

# assumption: we only have 3 levels of dependency (?!)

# getting the first and second level
MODULES0="`lsmod | grep -oe "^dvb_[[:alpha:]]*"`"
MODULES1=`lsmod | grep "^dvb" | awk '// {  print $4}' | grep -v "^$" | sed -e 's/,/ /g' `

# get third level (modules which depend on second level) - and stuff everything into one list
for MODULE in $MODULES1 $MODULES0; do
    RESULT=`lsmod | grep "^$MODULE" | awk '// {  print $4}' | grep -v "^$" | sed -e 's/,/ /g' `
    MODULES="$MODULES $MODULE `lsmod | grep "^$MODULE" | awk '{  print $4}' | grep -v "^$" | sed -e 's/,/ /g'`"
done

MODULES="`echo $MODULES | sort | uniq`"

while [ "`lsmod | grep "^dvb" | awk '// {  print $4}' | grep -v "^$" | sed -e 's/,/ /g' `" != "" ]; do
    for MODULE in $MODULES ; do
        rmmod $MODULE >/dev/null 2>&1 || /bin/true
    done
done

# should be dvb_core or dvb_usb left
for MODULE in $MODULES0 ; do
    rmmod $MODULE >/dev/null 2>&1 || /bin/true
done

wait `pidof rmmod`

# load the modules in one shot
modprobe -a $MODULES >/dev/null 2>&1 || /bin/true
udevadm settle
end script

