<%pre>
#include <ClearSilver.h>
#include <yavdr/common.h>
#include <jsoncpp/json.hpp>

using namespace std;
</%pre><& authenticate ><%args>
</%args>
<%cpp>
	HDF *hdf = NULL;
	NEOERR *err;
	if (((err = hdf_init(&hdf)) != STATUS_OK) || ((err = hdf_read_file(hdf, YAVDRDB)) != STATUS_OK))
	{
		reply.out() << "Error on hdf_read_file.";
		nerr_log_error(err);
	}
	else
	{
		Json::Value json;
		json["data"]["running"] = (system("pidof -s vdr") == 0?1:0);
		
		FILE *fp;

		fp = popen("df | grep -vE '^tmpfs|cdrom|none'| grep 'dev' | awk '{ sum+=$2; used+=$3; free+=$4 } END { print sum \"|\" used \"|\" free }'", "r");
		if (!feof(fp)) {
			unsigned long int sum, used, free;
			
			int result = fscanf(fp, "%lu|%lu|%lu", &sum, &used, &free);
			json["data"]["disk"]["sum"] = (Json::Value::UInt64)sum;
			json["data"]["disk"]["used"] = (Json::Value::UInt64)used;
			json["data"]["disk"]["free"] = (Json::Value::UInt64)free;
		}
		
		string x = hdf_get_value(hdf, "system.x11.display.0.resolution.x", "");
		if (x != "") {
			string y = hdf_get_value(hdf, "system.x11.display.0.resolution.y", "");
			json["data"]["resolution"] = x + "x" + y;
		} else {
			json["data"]["resolution"] = "";
		}
		string setup = hdf_get_value(hdf, "vdr.setup", "unknown");
		json["data"]["frontend"] = setup + (setup != "custom"?"":" (" + string(hdf_get_value(hdf, "vdr.frontend", "unknown")) + " / " + string(hdf_get_value(hdf, "vdr.backend", "unknown")));

		json["success"] = true;
		reply.setContentType("application/json; charset=utf-8");
		reply.out() << json;
	}
</%cpp>
