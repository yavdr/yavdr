<%pre>
#include <string>
#include <iostream>
#include <fstream>
#include <ctype.h>
#include <ClearSilver.h>
#include <yavdr/common.h>
#include <jsoncpp/json.h>

using namespace std;
</%pre><& authenticate ><%args>
//Default type of args is string and we should leave it like this
//For more robustness, avoid to define integer vars in here, better cast string to int later!!!
hdfpath;
hdftree;
string hdfpaths[];
</%args><%shared>
void Tokenize(const string& str,
		vector<string>& tokens,
		const string& delimiters = " ")
{
	tokens.clear();
	// Skip delimiters at beginning.
	string::size_type lastPos = str.find_first_not_of(delimiters, 0);
	// Find first "non-delimiter".
	string::size_type pos = str.find_first_of(delimiters, lastPos);

	while (string::npos != pos || string::npos != lastPos)
	{
		// Found a token, add it to the vector.
		tokens.push_back(str.substr(lastPos, pos - lastPos));
		// Skip delimiters.  Note the "not_of"
		lastPos = str.find_first_not_of(delimiters, pos);
		// Find next "non-delimiter"
		pos = str.find_first_of(delimiters, lastPos);
	}
}

void hdfwalk(HDF *hdf, HDF *child, Json::Value *json, bool includeLength) {
	int length = 0;
	while (child != NULL) {
		if (child->child != NULL) {
			Json::Value dummy;
			hdfwalk(hdf, child->child, &dummy, true);
			(*json)[child->name] = dummy;
		} else {
			(*json)[child->name] = child->value;
		}
		length ++;
		child = child->next;
	}
	if (includeLength) {
		(*json)["length"] = length;
	}
}
</%shared><%cpp>
  reply.setHeader ("Cache-Control", "no-cache", false);
  string value = "";
  const char *valid_hdf_requests[] = {
    "webfrontend.language",
    "vdr.frontend",
    "system.shutdown",
    "system.sound.type",
    "system.hardware.nvidia.overscan",
    "system.grub.timeout",
    "system.wakeup.type",
    "vdr.plugin.graphtft.enabled",
    "vdr.plugin.lifeguard.enable",
    "system.x11.dualhead.enabled",
    "system.wakeup.method",
    "system.wakeup.methods_available",
    "system.wakeup.disable_usb",
	"vdr.epg.charset_override",
	"system.hardware.sundtek"
  };
  
  bool validRequest = false;
  if (hdfpaths.size() == 0) {
	  for (int findex = 0; (findex < (sizeof(valid_hdf_requests) / sizeof(valid_hdf_requests[0]))) && !validRequest; findex++)
	  {
		  if (hdfpath == valid_hdf_requests[findex] || hdftree == valid_hdf_requests[findex])
			  validRequest = true;
	  }
  } else {
	  validRequest = true;
	  for (int i = 0; i < hdfpaths.size() && validRequest; i++) {
		  bool localValidRequest = false;

		  for (int findex = 0; (findex < (sizeof(valid_hdf_requests) / sizeof(valid_hdf_requests[0]))) && !localValidRequest; findex++) {
			  if (hdfpaths[i] == valid_hdf_requests[findex])
				  localValidRequest = true;
		  }
		  validRequest &= localValidRequest;
	  }
  }
  if (validRequest){
      HDF *hdf = NULL;
      NEOERR *err;
      if (((err = hdf_init(&hdf)) != STATUS_OK) || ((err = hdf_read_file(hdf, YAVDRDB)) != STATUS_OK))
      {
        reply.out() << "Error on hdf_read_file.";
        nerr_log_error(err);
      }
      else
      {
    	  if (hdfpaths.size() == 0) {
    		  if (hdfpath.size() > 0) {
    			  value = hdf_get_value(hdf, hdfpath.c_str(), "");
    			  reply.out() << value;
    		  } else {
    			  reply.setHeader ("Content-Type", "application/json", false);

        		  Json::Value json;
        		  HDF *start = hdf_get_obj(hdf, hdftree.c_str());
        		  if (start != NULL) {
        			  hdfwalk(hdf, start, &json, false);
        		  }
        		  reply.out() << json;
    		  }
    	  } else {
    		  reply.setHeader ("Content-Type", "application/json", false);

    		  Json::Value json;

    		  for (int i = 0; i < hdfpaths.size() && validRequest; i++) {
				  vector<string> parts;
				  Tokenize(hdfpaths[i], parts, ".");
				  string value = hdf_get_value(hdf, hdfpaths[i].c_str(), "");

				  switch (parts.size()) {
				  case 1:
					  json[parts[0]] = value;
					  break;
				  case 2:
					  json[parts[0]][parts[1]] = value;
					  break;
				  case 3:
					  json[parts[0]][parts[1]][parts[2]] = value;
					  break;
				  case 4:
					  json[parts[0]][parts[1]][parts[2]][parts[3]] = value;
					  break;
				  case 5:
					  json[parts[0]][parts[1]][parts[2]][parts[3]][parts[4]] = value;
					  break;
				  case 6:
					  json[parts[0]][parts[1]][parts[2]][parts[3]][parts[4]][parts[5]] = value;
					  break;
				  case 7:
					  json[parts[0]][parts[1]][parts[2]][parts[3]][parts[4]][parts[5]][parts[6]] = value;
					  break;
				  }
    		  }

    		  reply.out() << json;
    	  }
      }
      hdf_destroy(&hdf);
  }
  else{
      reply.out() << "Invalid request.";
  }
</%cpp>
