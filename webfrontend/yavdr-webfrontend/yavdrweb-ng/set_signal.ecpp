<%pre>
#include <stdlib.h>
#include <string>
#include <ctype.h>

extern "C" {
#include <yavdr/db-utils/dbset.h>
#include <yavdr/db-utils/dbremove.h>
};

#include <yavdr/common.h>

using namespace std;
</%pre><& authenticate ><%args>
//Default type of args is string and we should leave it like this
//For more robustness, avoid to define integer vars in here, better cast string to int later!!!
signal;
signal_params = "";
value;
value2;
string values[];
</%args><%cpp>

string success = "false";
int ret = 0;

if (
		(signal == "reboot") ||
		(signal == "change-frontend") ||
		(signal == "change-lifeguard") ||
		(signal == "kill-xbmc") ||
		(signal == "restart-vdr") ||
		(signal == "change-auto-net-yavdr") ||
		(signal == "change-timeout") ||
		(signal == "change-sound") ||
		(signal == "graphtft-state-change") ||
		(signal == "change-epg") ||
		(signal == "change-display") ||
		(signal == "change-plugin") ||
		(signal == "rescan-display")
)
{

	if (signal == "change-frontend" )
	{
		if ((value == "xine") || (value == "xineliboutput") || (value == "xbmc") || (value == "headless"))
		{
			int err = dbset("vdr.frontend=%s", value.c_str());
		}
	}
	else if (signal == "change-epg" )
	{
		if ((value == "") || (value == "ISO-8859-9"))
		{
			int err = dbset("vdr.epg.charset_override=%s", value.c_str());
		}
	}
	else if (signal == "change-timeout" )
	{
		int timeoutval = atoi(value.c_str());
		if (timeoutval >= 0 && timeoutval <= 10)
		{
			int err = dbset("system.grub.timeout=%i", timeoutval);
		}
	}
	else if (signal == "graphtft-state-change")
	{
		if ((value == "") || (value == "1"))
		{
			int err = dbset("vdr.plugin.graphtft.enabled=%s", (value == ""?"0":"1"));
		}
	}
	else if (signal == "change-sound" )
	{
		if ((value == "analog") || (value == "spdif") || (value == "hdmi") || (value == "passthrough") || (value == "hdmi+analog"))
		{
			int err = dbset("system.sound.type=%s", value.c_str());
		}
	}
	else if (signal == "change-lifeguard" )
	{
		int err = dbremove("vdr.plugin.lifeguard.enable");
		if (values.size() > 0) {
			for (int i = 0; i < values.size(); i++)
			{
				if ((values[i] == "aptitude") || (values[i] == "ssh") ||
						(values[i] == "nfs") || (values[i] == "ftp") ||
						(values[i] == "xbmc") || (values[i] == "smb"))
				{
					err = dbset("vdr.plugin.lifeguard.enable.%i=%s", i, values[i].c_str());
					/*if (err != STATUS_OK){
					 }*/
				}
			}
		} else {
			err = dbset("vdr.plugin.lifeguard.enable=false");
		}
	}

	string cmd = "/usr/bin/signal-event " + signal;
	if (signal_params != "") {
		cmd += " " + signal_params;
	}

	ret = system( cmd.c_str() );
	success = "true"; //TODO: use ret to find out if we were successful.
}
</%cpp> {
	success: <$success$>,
	result: <$ret$>
}
