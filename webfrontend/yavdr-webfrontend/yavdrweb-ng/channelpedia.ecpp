<%pre>
#include <stdio.h>
#include <string>
#include <stdlib.h>
#include <dirent.h>
#include <jsoncpp/json.hpp>
#include "curl/curl.h"

using namespace std;
</%pre><%args>
node;
</%args><%shared>

	// This is the writer call back function used by curl  
	static int writer(char *data, size_t size, size_t nmemb,  
					  std::string *buffer)  
	{  
	  // What we will return  
	  int result = 0;  
	  
	  // Is there anything in the buffer?  
	  if (buffer != NULL)  
	  {  
		// Append the data to the buffer  
		buffer->append(data, size * nmemb);  
	  
		// How much did we write?  
		result = size * nmemb;  
	  }  
	  
	  return result;  
	}  
</%shared>
<& authenticate >
<%cpp>
	reply.setHeader ("Cache-Control", "no-cache", false);
	reply.setContentType ("application/json; charset=utf-8"); // ; charset=UTF-8

	Json::Value json;

	char errorBuffer[CURL_ERROR_SIZE];  
	string buffer;

	CURL *curl;
	CURLcode curlResult;
    // Create our curl handle  
    curl = curl_easy_init();  

    // Now set up all of the curl options  
    curl_easy_setopt(curl, CURLOPT_ERRORBUFFER, errorBuffer);  
    
    curl_easy_setopt(curl, CURLOPT_HEADER, 0);  
    curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1);  
    curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writer);  
    curl_easy_setopt(curl, CURLOPT_WRITEDATA, &buffer);
    
    if (curl)  
    {  
		if (node == "root") {
			curl_easy_setopt(curl, CURLOPT_URL, "http://channelpedia.yavdr.com/restful/sources");
			// Attempt to retrieve the remote page  
			curlResult = curl_easy_perform(curl);  

			// Always cleanup  
			curl_easy_cleanup(curl);  
			
			// Did we succeed?  
			if (curlResult == CURLE_OK)
			{  
				Json::Value source;   // will contains the root value after parsing.
				Json::Reader reader;
				bool parsingSuccessful = reader.parse( buffer, source );
				const Json::Value quellen = source["result"];

			    if( quellen.size() > 0 ) {
			    	int i = 0;
			        for( Json::ValueIterator itr = quellen.begin() ; itr != quellen.end() ; itr++ ) {
			        	string key = itr.key().asString();
			        	if (quellen[key].size() > 0) {
			        		json[i]["id"] = key;
			        		json[i]["text"] = key;
							json[i]["leaf"] = false;
							json[i]["draggable"] = false;
							json[i]["groupable"] = false;
							int j = 0;
							for( Json::ValueIterator itr2 = (*itr).begin() ; itr2 != (*itr).end() ; itr2++ ) {
								string key2 = itr2.key().asString();
								if ((*itr)[key2].size() > 0) { // languages available
									Json::Value child;
									child["id"] = key + "/" + key2;
									child["text"] = key2;
									child["leaf"] = false;
									child["draggable"] = false;
									child["groupable"] = false;
									
									int k = 0;
									for( Json::ValueIterator itr3 = (*itr2).begin() ; itr3 != (*itr2).end() ; itr3++ ) {
										string key3 = (*itr3).asString();
										Json::Value language;
										language["id"] = key + "/" + key2 + "/" + key3;
										language["text"] = key3;
										language["leaf"] = false;
										language["draggable"] = true;
										language["groupable"] = false;
										
										child["children"][k++] = language;
									}
									json[i]["children"][j++] = child;
								}
							}
			        	} // ignore empty...

			        	i++;
			        }
			        
			    }

				reply.out() << json;
			} else {  
				reply.out() << "Error: [" << curlResult << "] - " << errorBuffer;
			}  
		} else {
			string url = "http://channelpedia.yavdr.com/restful/channelgroups/" + node + "/all/json";
			curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
			// Attempt to retrieve the remote page
			curlResult = curl_easy_perform(curl);  

			// Always cleanup  A
			curl_easy_cleanup(curl);
			
			// Did we succeed?  
			if (curlResult == CURLE_OK)
			{
				Json::Value source;   // will contains the root value after parsing.
				Json::Reader reader;
				bool parsingSuccessful = reader.parse( buffer, source );
				char *dummy = NULL;

				if (parsingSuccessful) {
					const Json::Value channelgroups = source["result"];
					if( channelgroups.size() > 0 ) {
						int i = 0;
						for( Json::ValueIterator itr = channelgroups.begin() ; itr != channelgroups.end() ; itr++ ) {
							Json::Value channelgroup = (*itr);
							if (asprintf(&dummy, "%d", channelgroup["id"].asInt()) > 0) {
								json[i]["id"] = node + "/" + dummy;
								json[i]["text"] = channelgroup["friendlyname"];
								json[i]["leaf"] = false;
								json[i]["draggable"] = true;
								json[i]["groupable"] = true;
								
								const Json::Value channels = channelgroup["channels"];
								if( channels.size() > 0 ) {
									int j = 0;
									Json::Value children;
									for( Json::ValueIterator itr2 = channels.begin() ; itr2 != channels.end() ; itr2++ ) {
										Json::Value channel = (*itr2)["parameters"];
										children[j]["id"] = channel["x_unique_id"];
										children[j]["text"] = channel["name"];
										children[j]["leaf"] = true;
										children[j]["draggable"] = true;
										children[j]["checked"] = false;
										children[j]["record"] = channel;
										j++;
									}
									json[i]["children"] = children;
								}
								
								i++;
								free(dummy);
							}
						}
					}
					reply.out() << json;
				}
			} else {  
				reply.out() << "Error: [" << curlResult << "] - " << errorBuffer;
			}

			/*
			if (node.find_first_of("/", node.find_first_of("/") + 1) == node.find_last_of("/")) { // three "/"
				string url = "http://channelpedia.yavdr.com/restful/channelgroups/" + node + "/0/json";
				curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
				// Attempt to retrieve the remote page
				curlResult = curl_easy_perform(curl);  
	
				// Always cleanup  A
				curl_easy_cleanup(curl);
				
				// Did we succeed?  
				if (curlResult == CURLE_OK)
				{
					Json::Value source;   // will contains the root value after parsing.
					Json::Reader reader;
					bool parsingSuccessful = reader.parse( buffer, source );
					char *dummy = NULL;
	
					if (parsingSuccessful) {
						const Json::Value channelgroups = source["result"];
						if( channelgroups.size() > 0 ) {
							int i = 0;
							for( Json::ValueIterator itr = channelgroups.begin() ; itr != channelgroups.end() ; itr++ ) {
								Json::Value channelgroup = (*itr);
								if (asprintf(&dummy, "%d", channelgroup["id"].asInt()) > 0) {
									json[i]["id"] = node + "/" + dummy;
									json[i]["text"] = channelgroup["friendlyname"];
									json[i]["leaf"] = false;
									json[i]["draggable"] = true;
									json[i]["groupable"] = true;
									i++;
									free(dummy);
								}
							}
						}
						reply.out() << json;
					}
				} else {  
					reply.out() << "Error: [" << curlResult << "] - " << errorBuffer;
				}
			} else {
				string url = "http://channelpedia.yavdr.com/restful/channelgroups/" + node + "/json";
				curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
				// Attempt to retrieve the remote page
				curlResult = curl_easy_perform(curl);  
	
				// Always cleanup  A
				curl_easy_cleanup(curl);
				
				// Did we succeed?  
				if (curlResult == CURLE_OK)
				{
					Json::Value source;   // will contains the root value after parsing.
					Json::Reader reader;
					bool parsingSuccessful = reader.parse( buffer, source );
					  
					char *dummy = NULL;
	
					if (parsingSuccessful) {
						const Json::Value channels = source["result"]["channels"];
						if( channels.size() > 0 ) {
							int i = 0;
							for( Json::ValueIterator itr = channels.begin() ; itr != channels.end() ; itr++ ) {
								Json::Value channel = (*itr)["parameters"];
								json[i]["id"] = (*itr)["string"];
								json[i]["text"] = channel["name"];
								json[i]["leaf"] = true;
								json[i]["draggable"] = true;								
								json[i]["record"] = channel;
								i++;
							}
						}
						reply.out() << json;
					}
				} else {  
					reply.out() << "Error: [" << curlResult << "] - " << errorBuffer;
				}
			}*/
		}
    }
		

		//reply.out() << json;

/*
 * [{
 *  "text":"yui-bridge.js",
 *  "id":"src\/adapter\/yui-bridge.js",
 *  "leaf":true,
 *  "cls":"file",
 *  "children": []
 * }]
 * 
 */
</%cpp>

