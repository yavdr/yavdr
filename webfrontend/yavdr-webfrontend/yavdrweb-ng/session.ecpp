<%pre>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string>
#include <jsoncpp/json.hpp>

extern "C" {
	#include <ClearSilver.h>
};

#include <yavdr/common.h>

using namespace std;
</%pre><& authenticate ><%args>
long int ts;
</%args><%cpp>
	reply.setHeader ("Cache-Control", "no-cache", false);
	reply.setHeader ("Content-Type", "application/json", false);

	Json::Value json;
	char *dummy = NULL;

	time_t seconds;
	seconds = time(NULL);
	if (asprintf(&dummy, "%li", (long int) seconds) > 0) {
		json["timestamp"] = dummy;
		json["uptime"]  = "";
		json["config"]  = "";
		// Daemons status
		json["daemons"]["vdr"]["status"]  = 1;
		json["daemons"]["xine"]["status"]  = 0;
		json["daemons"]["xbmc"]["status"]  = 1;
		free(dummy);
	}
	
    HDF *hdf = NULL;
    NEOERR *err;
    
    if (((err = hdf_init(&hdf)) != STATUS_OK) || ((err = hdf_read_file(hdf, YAVDRDB)) != STATUS_OK))
	{
		reply.out() << "Error on hdf_read_file.";
		nerr_log_error(err);
	}
	else
	{
		HDF *start = hdf_get_obj(hdf, (char *)"webfrontend.session.update");
		if (start != NULL) {
			int found = 0;
			Json::Value update;
			HDF *child = start->child;
			while (child != NULL) {
				if (atol(child->value) > ts) {
					found = 1;
					update[child->name] = atoi(child->value);
				}
				child = child->next;
			}
			if (found == 1)
				json["update"] = update;
		}
	}
	reply.out() << json;

</%cpp>
