<%pre>
#include <string>
#include <iostream>
#include <fstream>
#include <ctype.h>
#include <ClearSilver.h>
#include <yavdr/common.h>
#include <jsoncpp/json.h>

using namespace std;
</%pre>
<& authenticate >
<%cpp>
	reply.setHeader ("Cache-Control", "no-cache", false);
	reply.setHeader ("Content-Type", "application/json", false);

	string current_lirchw_description = "";
	string current_serial_port = "";
	string current_remote = "";
	string str;
	int index = 1;
	int current_lirchw_id = -1;
	HDF *hdf = NULL;
	NEOERR *err;
	const char *files[] = {
		"/usr/share/lirc/lirc.hwdb",
		"/usr/share/lirc/extras/more_remotes.hwdb"
	};

	//get current lirc settings from database
	if (((err = hdf_init(&hdf)) != STATUS_OK) || ((err = hdf_read_file(hdf, YAVDRDB)) != STATUS_OK))
	{
		nerr_log_error(err);
	}
	else
	{
		current_lirchw_description = hdf_get_value(hdf, "system.lirchw.description", "");
		current_serial_port = hdf_get_value(hdf, "system.lirchw.serial_port", "");
		current_remote = hdf_get_value(hdf, "system.remoted", "");
	}

	Json::Value list;
	list[0u][0u] = "";
	list[0u][1u] = "-";
	list[0u][2u] = "-";
	list[0u][3u] = "-";
	list[0u][4u] = "-";
	list[0u][5u] = "-";

	ifstream ifs;
	int next;
	for (int findex = 0; findex < (sizeof(files) / sizeof(files[0])); findex++)
	{
		ifs.open(files[findex], ifstream::in);

		while (ifs.good())
		{
			getline(ifs, str);

			if (isalpha(str[0]))
			{
				string::size_type bof = 0;
				string::size_type found;

				list[index][0u] = index;
				for (int i = 1; i <= 5; i++)
				{
					found = str.find_first_of(";", bof);

					if (current_lirchw_description != "" && str.substr(bof, found - bof) == current_lirchw_description) {
						current_lirchw_id = index;
					}

					list[index][i] = str.substr(bof, found - bof);
					bof = found + 1;
				}
				index++;
			}
		}

		ifs.close();
	}

    Json::Value json;
    json["receiverlist"] = list;
    json["current_receiver"] = current_lirchw_id;
    json["current_serial_port"] = current_serial_port;
    json["current_remoted"] = current_remote;
    reply.out() << json;

</%cpp>
