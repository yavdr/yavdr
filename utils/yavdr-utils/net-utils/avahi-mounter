#!/usr/bin/python

"""Simple Zeroconf service publication. Copyright 2008, Pierre of
stackp.online.fr. License appears to be "Do whatever you want".
Original code at http://stackp.online.fr/?p=35
"""

from __future__ import with_statement

import threading
# import functools
import time
import os
import subprocess
import avahi
import gobject
import dbus
import socket
import syslog
import gettext
from syslog import *
from dbus import DBusException
from dbus.mainloop.glib import DBusGMainLoop

__all__ = ["ZeroconfBrowser"]


class ZeroconfBrowser(object):
	def __init__(self, loop=None):
		self.localhost = socket.gethostname()
		self.local_loop = False
		if loop is None:
			gobject.threads_init()
			loop = DBusGMainLoop()
			self.local_loop = True
		self.bus = dbus.SystemBus(mainloop=loop)

		self.server = dbus.Interface(
			self.bus.get_object(avahi.DBUS_NAME, '/'),
			'org.freedesktop.Avahi.Server')

		self.lock = threading.Lock()
		self.mounts = {}
		syslog("initialized zeroconf browser on %s" % self.localhost)

	def __call__(self):
		if self.local_loop:
			gobject.MainLoop().run()
		syslog("main loop started")

	def browse(self,
		   type,
		   interface=avahi.IF_UNSPEC,
		   protocol=avahi.PROTO_UNSPEC,
		   domain='local',
		   flags=dbus.UInt32(0)):
		syslog("browse")
		with self.lock:
			sbrowser = dbus.Interface(
				self.bus.get_object(
					avahi.DBUS_NAME,
					self.server.ServiceBrowserNew(
						interface,
						protocol,
						type,
						domain,
						flags)
					),
				avahi.DBUS_INTERFACE_SERVICE_BROWSER)

			sbrowser.connect_to_signal("ItemNew", self.resolve)
			sbrowser.connect_to_signal("ItemRemove", self.removal)
			sbrowser.connect_to_signal("AllForNow", self.allfornow)
			sbrowser.connect_to_signal("Failure", self.browse_error)
			syslog("connected_to_signals")

	def resolve(self, interface, protocol, name,
				type, domain, aprotocol, flags=dbus.UInt32(0)):
		#syslog("Service found async:", interface, protocol, name, type, domain, flags)
		with self.lock:
			self.server.ResolveService(
				interface, protocol, name,
				type, domain, avahi.PROTO_UNSPEC, dbus.UInt32(0), 
				reply_handler=self.resolved, error_handler=self.resolve_error)

	def resolved(self, interface, protocol, name, type,
				 domain, host, aprotocol, address,
				 port, txt, flags):
		if self.localhost == host.split(".")[0]: return
		path = []
		subtype = []
		for t in txt:
			x = "".join((chr(c) for c in t))
			(key, value) = x.split("=")
			if key == "path":
				path = value
			elif key == "subtype":
				subtype = value

		mount = Mount(host, path, subtype)
		mount.create()
		self.mounts[name] = mount
		syslog("Service resolved: %s:%s nach %s" % (host, path, name))
		
	def resolve_error(self, exception):
		syslog("Resolution error:", exception)

	def browse_error(self, *args, **kwargs):
		syslog("Browse Error:", args, kwargs)

	def removal(self, interface, protocol, name, type, domain, flags):
		with self.lock:
			mount = self.mounts.get(name, None)
			if mount is not None:
				mount.remove()
				del self.mounts[name]
				#syslog("Service removed: %s" % (name))


	def allfornow(self):
		syslog("allfornow")

class Mount:
	def __init__(self, host, path, subtype):
		syslog("Mount created")
		self.remote = host + ":" + path
		self.media = "/media/"
		self.subtype = subtype
		if subtype == "vdr":
			self.name = _("Recordings_on_")
		elif subtype == "video":
			self.name = _("Videos_on_")
		elif subtype == "audio":
			self.name = _("Music_on_")
		elif subtype == "picture":
			self.name = _("Pictures_on_")
		else:
			self.name = _("Miscellaneous_on_")
		self.name += host.split('.')[0]
		self.local = self.media + self.name
		self.vdr = "/srv/vdr/video.00/" + self.name

	def create(self):
		syslog("create")
		p1 = subprocess.Popen(["mount"], stdout=subprocess.PIPE)
		mounts = subprocess.Popen(["grep", "type nfs"],
					  stdin=p1.stdout,
					  stdout=subprocess.PIPE).communicate()[0]
		for path in mounts.split('\n'):
			syslog("compare %s" % path)
			if len(path) != 0 and path.split()[2] == self.local:
				return
		try:
			os.makedirs(self.local)
		except OSError as (errno, strerror):
			if errno != 17:
				syslog("unable to make dir: %s" % strerror)
				return
		subprocess.call(['/bin/mount',
				 '-t', 'nfs',
				 self.remote,
				 self.local])
		if self.subtype == "vdr":
			self.link()

	def link(self):
		try:
			os.remove(self.vdr)
		except OSError as (errno, strerror):
			if errno != 2:
				syslog("I/O error({0}): {1}".format(errno, strerror))
				return
		try:
			os.symlink(self.local, self.vdr)
		except OSError as (errno, strerror):
			syslog("I/O error({0}): {1}".format(errno, strerror))
		self.notify()

	def notify(self):
		time.sleep(3)
		os.utime("/srv/vdr/video.00/.update", None)

	def remove(self):
		try:
			os.remove(self.vdr)
		except OSError as (errno, strerror):
			if errno != 2:
				syslog("I/O error({0}): {1}".format(errno, strer		subprocess.Popen(["umount", self.local])
		# os.rmdir(self.local)
		self.notify()

# initialize gettext
gettext.install('yavdr', '/usr/share/yavdr/locale', unicode=1)
# _ = gettext.lgettext

# initialize logging
openlog('avahi-mounter', LOG_PID, LOG_USER)

# start main loop
browser = ZeroconfBrowser()
browser.browse('_nfs._tcp')
browser()

