<%pre>
#include <string>
#include <dirent.h>
#include <errno.h>
#include <iostream>
#include <fstream>
#include <ClearSilver.h>

#include "../common.h"

using namespace std;
</%pre><& authenticate ><%shared>

NEOERR *csoutfunc(void *ctx, char *str)
{
	((string*)ctx)->append(str);
	//ctx = str;
	return STATUS_OK;
}

int scandirfilter(const struct dirent *entry)
{
	return entry->d_name[0] - '.';
}

</%shared><%cpp>

string lang = "";
string devmode = "0";
HDF *hdf = NULL;
NEOERR *err;

// get template path from tntnet.conf
string templatedir = request.getPathInfo() + "/usr/lib/yavdrweb/static/yavdrweb/index.cs";

if (((err = hdf_init(&hdf)) != STATUS_OK) || ((err = hdf_read_file(hdf, YAVDRDB)) != STATUS_OK))
{
	//reply.out() << "Error on hdf_read_file.";
	nerr_log_error(err);
}
else
{
	lang = hdf_get_value(hdf, "webfrontend.language", "");
	devmode = hdf_get_value(hdf, "webfrontend.devmode", "");
}

if (lang == "")
	lang = "en";

struct dirent **namelist = NULL;
char *segmentname;
int numtemps = scandir(templatedir.c_str(), &namelist, scandirfilter, alphasort);
ifstream is;
stringstream ss;

string cs = "";

for (int n = 0; n < numtemps; n++)
{
	if (asprintf(&segmentname, "%s/%s", templatedir.c_str(), namelist[n]->d_name) < 0)
	{
		fprintf(stderr, "error: %s asprintf\n", strerror(errno));
	}
	else
	{
		is.open (segmentname, ios::binary);
		if (is.is_open()) {
			char * buffer;

			// get length of file:
			is.seekg (0, ios::end);
			int length = is.tellg();
			is.seekg (0, ios::beg);

			// allocate memory:
			buffer = new char [length+1];

			// read data as a block:
			is.read (buffer,length);
			buffer[length] = 0;
			is.close();

			ss << buffer;

			delete[] buffer;
		}
		//		if (write_segment(templatefd, segmentname))
		//		{
		//			ret = -7;
		//		}
		free(segmentname);
	}
	free(namelist[n]);
}
free(namelist);

CSPARSE *parse = NULL;
err = cs_init(&parse, hdf);
if (err != STATUS_OK)
{
	nerr_log_error(err);
}
else
{
	char *buffer;
	string target;

	if (asprintf(&buffer, "%s", ss.str().c_str()) > 0) {
		int len = ss.str().length();
		err = cs_parse_string(parse, buffer, len);
		if (err != STATUS_OK)
		{
			nerr_log_error(err);
		}

		err = cs_render(parse, &target, csoutfunc);
		if (err != STATUS_OK)
		{
			nerr_log_error(err);
		}

		cs_destroy(&parse);
	}

	reply.out() << target;
}

hdf_destroy(&hdf);
</%cpp>
<link rel="stylesheet" type="text/css" href="/ext/resources/css/ext-all.css" />
<!-- overrides to base library -->
<link rel="stylesheet" type="text/css" href="/ext-ux/css/Portal.css" />
<link rel="stylesheet" type="text/css" href="/ext-ux/css/GroupTab.css" />
<link rel="stylesheet" type="text/css" href="/ext-ux/css/Spinner.css" />
<link rel="stylesheet" type="text/css" href="/static/yavdr.css" />

<link rel="shortcut icon" href="/static/images/favicon.ico" type="image/vnd.microsoft.icon">
<link rel="icon" href="/static/images/favicon.ico" type="image/vnd.microsoft.icon">
<style>
.x-viewport, .x-viewport body {
	overflow: auto !important;
}
</style>
<script type="text/javascript" src="/ext/adapter/ext/ext-base.js"></script>
<script type="text/javascript" src="/ext/ext-all<? devmode != "0" ? "-debug" ?>.js"></script>
<!-- TODO: only use those parts of ext that a really used by this application. saves a lot of http traffic -->

<script>
Ext.BLANK_IMAGE_URL = '/ext/resources/images/default/s.gif';
var yavdrwebGlobalInfo = {
	user : "<$request.getUsername()$>",
	lang : "<$lang$>",
	devmode : "<$devmode$>"
};
</script>

<script type="text/javascript" src="/ext-ux/GroupTabPanel.js"></script>
<script type="text/javascript" src="/ext-ux/GroupTab.js"></script>
<script type="text/javascript" src="/ext-ux/Portal.js"></script>
<script type="text/javascript" src="/ext-ux/PortalColumn.js"></script>
<script type="text/javascript" src="/ext-ux/Portlet.js"></script>
<script type="text/javascript" src="/ext-ux/Spinner.js"></script>
<script type="text/javascript" src="/ext-ux/SpinnerField.js"></script>

<script type="text/javascript" src="/static/locale/en.js"></script>
<{	if (lang != "en") reply.out() << "        <script type=\"text/javascript\" src=\"/static/locale/" << lang << ".js\"></script>\n";}>
<script type="text/javascript" src="/static/config_tabs/remote.js"></script>
<script type="text/javascript" src="/static/config_tabs/lirc.js"></script>
<script type="text/javascript" src="/static/config_tabs/inputlirc.js"></script>
<script type="text/javascript" src="/static/config_tabs/irserver.js"></script>
<script type="text/javascript" src="/static/config_tabs/channels.js"></script>
<script type="text/javascript" src="/static/config_tabs/diagnose.js"></script>
<script type="text/javascript" src="/static/config_tabs/system.js"></script>
<script type="text/javascript" src="/static/config_tabs/network.js"></script>
<script type="text/javascript" src="/static/config_tabs/nvidia.js"></script>
<script type="text/javascript" src="/static/config_tabs/vdr-frontend.js"></script>
<script type="text/javascript" src="/static/config_tabs/web-frontend.js"></script>
<script type="text/javascript" src="/static/config_tabs/vdr-upload-config.js"></script>
<script type="text/javascript" src="/static/config_tabs/shutdown.js"></script>
<script type="text/javascript" src="/static/config_tabs/shutdown.js"></script>
<script type="text/javascript" src="/static/config_tabs/timeout.js"></script>
<script type="text/javascript" src="/static/config_tabs/x11.js"></script>
<script type="text/javascript" src="/static/config_tabs/sound.js"></script>
<script type="text/javascript" src="/static/config_tabs/lifeguard.js"></script>
<script type="text/javascript" src="/static/config_tabs/packages.js"></script>
<script type="text/javascript" src="/static/language-handling.js"></script>
<script type="text/javascript" src="/static/grouptabs.js"></script>
</head>
<body></body>
</html>
