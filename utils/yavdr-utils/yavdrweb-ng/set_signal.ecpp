<%pre>
#include <stdlib.h>
#include <string>
#include <ctype.h>

extern "C" {
#include <ClearSilver.h>
};

#include "common.h"

using namespace std;
</%pre><& authenticate ><%args>
//Default type of args is string and we should leave it like this
//For more robustness, avoid to define integer vars in here, better cast string to int later!!!
signal;
signal_params = "";
value;
value2;
string values[];
</%args><%cpp>

string success = "false";

if (
		(signal == "reboot") ||
		(signal == "change-frontend") ||
		(signal == "change-shutdown") ||
		(signal == "change-lifeguard") ||
		(signal == "kill-xbmc") ||
		(signal == "restart-vdr") ||
		(signal == "change-auto-net-yavdr") ||
		(signal == "change-timeout") ||
		(signal == "change-sound") ||
		(signal == "graphtft-state-change") ||
		(signal == "change-display") ||
		(signal == "change-plugin")
)
{

	if (signal == "change-frontend" )
	{
		if ((value == "xine") || (value == "xineliboutput") || (value == "xbmc") || (value == "headless"))
		{
			NEOERR *err;
			HDF *hdf = NULL;
			if (((err = hdf_init(&hdf)) != STATUS_OK) || ((err = hdf_read_file(hdf, YAVDRDB)) != STATUS_OK))
			{
				nerr_log_error(err);
			}
                        err = hdf_set_valuef(hdf, "vdr.frontend=%s", value.c_str());
			/*if (err != STATUS_OK){
			 }*/
			err = hdf_write_file(hdf, YAVDRDB);
			if (err != STATUS_OK)
			{
				nerr_log_error(err);
			}
			hdf_destroy(&hdf);
		}
	}
	else if (signal == "change-shutdown" )
	{
		if ((value == "s3") || (value == "s4") || (value == "s5") || (value == "poweroff") || (value == "reboot"))
		{
			NEOERR *err;
			HDF *hdf = NULL;
			if (((err = hdf_init(&hdf)) != STATUS_OK) || ((err = hdf_read_file(hdf, YAVDRDB)) != STATUS_OK))
			{
				nerr_log_error(err);
			}
                        err = hdf_set_valuef(hdf, "system.shutdown=%s", value.c_str());
                        /*if (err != STATUS_OK){
                         }*/
                        err = hdf_write_file(hdf, YAVDRDB);
                        if (err != STATUS_OK)
                        {
                                nerr_log_error(err);
                        }

                        err = hdf_set_valuef(hdf, "system.disable_usb_wackup=%s", (value == "1"?"1":"0"));
                        /*if (err != STATUS_OK){
                         }*/
                        err = hdf_write_file(hdf, YAVDRDB);
                        if (err != STATUS_OK)
                        {
                                nerr_log_error(err);
                        }
			hdf_destroy(&hdf);
		}
	}
	else if (signal == "change-timeout" )
	{
		int timeoutval = atoi(value.c_str());
		if (timeoutval >= 0 && timeoutval <= 10)
		{
			NEOERR *err;
			HDF *hdf = NULL;
			if (((err = hdf_init(&hdf)) != STATUS_OK) || ((err = hdf_read_file(hdf, YAVDRDB)) != STATUS_OK))
			{
				nerr_log_error(err);
			}
			err = hdf_set_valuef(hdf, "system.grub.timeout=%i", timeoutval);
			/*if (err != STATUS_OK){
			 }*/
			err = hdf_write_file(hdf, YAVDRDB);
			if (err != STATUS_OK)
			{
				nerr_log_error(err);
			}
			hdf_destroy(&hdf);
		}
	}
	else if (signal == "graphtft-state-change")
	{
		if ((value == "") || (value == "1"))
		{
			NEOERR *err;
			HDF *hdf = NULL;
			if (((err = hdf_init(&hdf)) != STATUS_OK) || ((err = hdf_read_file(hdf, YAVDRDB)) != STATUS_OK))
			{
				nerr_log_error(err);
			}
			err = hdf_set_valuef(hdf, "vdr.plugin.graphtft.enabled=%s", (value == ""?"0":"1"));
			/*if (err != STATUS_OK){
			 }*/
			err = hdf_write_file(hdf, YAVDRDB);
			if (err != STATUS_OK)
			{
				nerr_log_error(err);
			}
			hdf_destroy(&hdf);
		}
	}
	else if (signal == "change-sound" )
	{
		if ((value == "analog") || (value == "spdif") || (value == "hdmi") || (value == "passthrough") || (value == "hdmi+analog"))
		{
			NEOERR *err;
			HDF *hdf = NULL;
			if (((err = hdf_init(&hdf)) != STATUS_OK) || ((err = hdf_read_file(hdf, YAVDRDB)) != STATUS_OK))
			{
				nerr_log_error(err);
			}
			err = hdf_set_valuef(hdf, "system.sound.type=%s", value.c_str());
			/*if (err != STATUS_OK){
			 }*/
			err = hdf_write_file(hdf, YAVDRDB);
			if (err != STATUS_OK)
			{
				nerr_log_error(err);
			}
			hdf_destroy(&hdf);
		}
	}
	else if (signal == "change-lifeguard" )
	{
		NEOERR *err;
		HDF *hdf = NULL;
		if (((err = hdf_init(&hdf)) != STATUS_OK) || ((err = hdf_read_file(hdf, YAVDRDB)) != STATUS_OK))
		{
			nerr_log_error(err);
		}
		err = hdf_remove_tree(hdf, "vdr.plugin.lifeguard.enable");
		if (values.size() > 0) {
			for (int i = 0; i < values.size(); i++)
			{
				if ((values[i] == "aptitude") || (values[i] == "ssh") ||
						(values[i] == "nfs") || (values[i] == "ftp") ||
						(values[i] == "xbmc") || (values[i] == "smb"))
				{
					err = hdf_set_valuef(hdf, "vdr.plugin.lifeguard.enable.%i=%s", i, values[i].c_str());
					/*if (err != STATUS_OK){
					 }*/
				}
			}
		} else {
			err = hdf_set_value(hdf, "vdr.plugin.lifeguard.enable", "false");
		}
		err = hdf_write_file(hdf, YAVDRDB);
		if (err != STATUS_OK)
		{
			nerr_log_error(err);
		}
		hdf_destroy(&hdf);
	}

	string cmd = "/usr/bin/signal-event " + signal;
	if (signal_params != "") {
		cmd += " " + signal_params;
	}

	int ret = system( cmd.c_str());
	success = "true"; //TODO: use ret to find out if we were successful.
}
</%cpp> {
	success: <$success$>
}
