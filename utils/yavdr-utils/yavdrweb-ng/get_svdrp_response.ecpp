<%pre>
#include <stdio.h>
#include <string>
#include <jsoncpp/json.h>

using namespace std;
</%pre><& authenticate ><%args>
command;
</%args><%shared>

Json::Value convertSingleRawChannelDataToJSON( char * buffer, 
        int channel_nr, string::size_type begin_of_channel_name, 
        char *  prefixed_groupname){

    Json::Value json_channel;
    string sBuffer = string(buffer);
    string::size_type bof = 0;
    int channel_length = strlen(buffer) -1;
    string::size_type first_semicolon = sBuffer.substr(4, channel_length -4 ).find_first_of(";", bof);
    string::size_type marker = sBuffer.substr(4, channel_length -4 ).find_first_of(":", bof);
    string::size_type end_of_channel_name;
    
    string provider = "";
    if (first_semicolon != string::npos && marker != string::npos){
        if( first_semicolon > marker){
            //after channel name there is no transponder info
            first_semicolon = marker;
        }
        else{
            provider = sBuffer.substr(first_semicolon + 5, marker - 1 - first_semicolon );
            
        }
    }
    if (first_semicolon != string::npos)
        end_of_channel_name = first_semicolon + 3;
    else
        end_of_channel_name = marker + 3;
    
    string channel_name = "unknown";
    if (end_of_channel_name > 0 && begin_of_channel_name > 0)
        channel_name = sBuffer.substr(begin_of_channel_name + 1, end_of_channel_name - begin_of_channel_name );
    
    int start = marker + 5;
    marker = sBuffer.substr( start, channel_length - start ).find_first_of(":", bof);
    int frequency = atoi( sBuffer.substr(start, marker ).c_str());

    start += marker + 1;
    marker = sBuffer.substr( start, channel_length - start ).find_first_of(":", bof);
    string modulation = sBuffer.substr( start, marker );

    start += marker + 1;
    marker = sBuffer.substr( start, channel_length - start ).find_first_of(":", bof);
    string source = sBuffer.substr( start, marker );
    
    start += marker + 1;
    marker = sBuffer.substr( start, channel_length - start ).find_first_of(":", bof);
    int symbolrate = atoi( sBuffer.substr( start, marker ).c_str() );

    start += marker + 1;
    marker = sBuffer.substr( start, channel_length - start ).find_first_of(":", bof);
    string vpid = sBuffer.substr( start, marker );

    start += marker + 1;
    marker = sBuffer.substr( start, channel_length - start ).find_first_of(":", bof);
    string apid = sBuffer.substr( start, marker );

    start += marker + 1;
    marker = sBuffer.substr( start, channel_length - start ).find_first_of(":", bof);
    string tpid = sBuffer.substr( start, marker );

    start += marker + 1;
    marker = sBuffer.substr( start, channel_length - start ).find_first_of(":", bof);
    string caid = sBuffer.substr( start, marker );

    start += marker + 1;
    marker = sBuffer.substr( start, channel_length - start ).find_first_of(":", bof);
    int sid = atoi( sBuffer.substr( start, marker ).c_str() );

    start += marker + 1;
    marker = sBuffer.substr( start, channel_length - start ).find_first_of(":", bof);
    int nid = atoi( sBuffer.substr( start, marker ).c_str());

    start += marker + 1;
    marker = sBuffer.substr( start, channel_length - start ).find_first_of(":", bof);
    string tid = sBuffer.substr( start, marker );

    start += marker + 1;
    marker = channel_length - start - 1; //last item, not : following
    int rid = atoi( sBuffer.substr( start, marker ).c_str() );

    string friendly_type = (vpid == "0") ? "Radio" : "TV";
    string friendly_scrambled = (caid == "0") ? "FTA" : "scrambled";

    string::size_type lang_marker_begin = apid.find_first_of("=", bof);
    string::size_type lang_marker_end = apid.find_first_of("@", bof);
    string friendly_language = apid.substr(lang_marker_begin + 1, lang_marker_end - lang_marker_begin -1);
    
    char friendly_transp[120];
    sprintf( friendly_transp ,"%s %d %d", source.c_str(), frequency, symbolrate );
    
    json_channel["cnum"]  = channel_nr;
    json_channel["cname"] = channel_name;
    json_channel["cprov"] = provider;
    json_channel["cfreq"] = frequency;
    json_channel["cmod"]  = modulation;
    json_channel["csrc"]  = source;
    json_channel["csymb"] = symbolrate;
    json_channel["cvpid"] = vpid;
    json_channel["capid"] = apid;
    json_channel["ctpid"] = tpid;
    json_channel["ccaid"] = caid;
    json_channel["csid"]  = sid;
    json_channel["cnid"]  = nid;
    json_channel["ctid"]  = tid;
    json_channel["crid"]  = rid;
    json_channel["cgroup"]= prefixed_groupname;
    json_channel["c_friendly_type"]  = friendly_type;
    json_channel["c_friendly_scrambled"]= friendly_scrambled;
    json_channel["c_friendly_lang"]= friendly_language;
    json_channel["c_friendly_transp"]= friendly_transp;

    //json_channel["cstr"]  = channel;
    return json_channel;
}
</%shared><%cpp>
reply.setHeader ("Cache-Control", "no-cache", false);
reply.setHeader ("Content-Type", "application/json", false);

//TODO: check if charset conversion is needed, we assume UTF-8

//restrict commands
//string svdrpcmd = "/usr/bin/svdrpsend " + command;

if (command == "LSTC") // || command == "NEWC")
{
    string svdrpcmd = "/usr/bin/svdrpsend LSTC :groups";

    if (FILE *stream = popen(svdrpcmd.c_str(), "r"))
    {
        char buffer[1024];
        int counter = 0;
        int groupcounter = 0;
        string groupname = "default";
        char prefixed_groupname[120] = "000 default";
        Json::Value json_channels;
        
        while (!feof(stream))
        {
          if (fgets(buffer, sizeof(buffer), stream) != NULL)
          {
             int status = atoi(string(buffer).substr(0, 3).c_str());
             if ( status != 220 && status != 221 ) //don't output meta lines
             {
                 string sBuffer = string(buffer);
                 string::size_type bof = 0;
                 int channel_length = strlen(buffer) -1;
                 string::size_type begin_of_channel_name  = sBuffer.substr(4, channel_length -4 ).find_first_of(" ", bof) + 4;
                 int channel_nr = atoi(sBuffer.substr(4, begin_of_channel_name -4).c_str());
                 
                 //check if we have got a channel group label which always has channel_nr 0
                 if (channel_nr != 0)
                 {
                     json_channels[counter] = convertSingleRawChannelDataToJSON( buffer, channel_nr, begin_of_channel_name, prefixed_groupname);
                     counter ++;
                 }
                 else if (sBuffer.substr(begin_of_channel_name + 1,1) == ":")
                 {
                     groupname = sBuffer.substr(begin_of_channel_name + 2, strlen(buffer) - begin_of_channel_name - 4);
                     sprintf( prefixed_groupname ,"%03d %s", groupcounter, groupname.c_str() );
                     
                     groupcounter++;
                     
                 }
             }
          }
        }
        pclose(stream);
        Json::Value json_channellist;
        json_channellist["channelList"] = json_channels;
        json_channellist["totalCount"]  = counter;
        reply.out() << json_channellist;
    }
}
else
    reply.out() << "Illegal command.";

</%cpp>

