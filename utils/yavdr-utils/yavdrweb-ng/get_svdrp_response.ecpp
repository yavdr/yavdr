<%pre>
#include <stdio.h>
#include <string>
#include <jsoncpp/json.h>

using namespace std;
</%pre><& authenticate ><%args>
command;
param1;
param2;
</%args><%shared>

Json::Value convertSingleRawChannelDataToJSON( char * buffer, 
        int channel_nr, string::size_type begin_of_channel_name, 
        char *  prefixed_groupname){

    Json::Value json_channel;
    string sBuffer = string(buffer);
    string::size_type bof = 0;
    int channel_length = strlen(buffer) -1;
    string::size_type first_semicolon = sBuffer.substr(4, channel_length -4 ).find_first_of(";", bof);
    string::size_type marker = sBuffer.substr(4, channel_length -4 ).find_first_of(":", bof);
    string::size_type end_of_channel_name;

    //channel group
    json_channel["_group"]= prefixed_groupname;
    
    //channel number
    json_channel["_num"]  = channel_nr;
    
    //channel provider
    json_channel["prov"] = "";
    if (first_semicolon != string::npos && marker != string::npos){
        if( first_semicolon > marker){
            //after channel name there is no transponder info
            first_semicolon = marker;
        }
        else{
            json_channel["prov"] = sBuffer.substr(first_semicolon + 5, marker - 1 - first_semicolon );
            
        }
    }

    //channel name
    json_channel["name"] = "unknown";
    if (first_semicolon != string::npos)
        end_of_channel_name = first_semicolon + 3;
    else
        end_of_channel_name = marker + 3;
    if (end_of_channel_name > 0 && begin_of_channel_name > 0)
        json_channel["name"] = sBuffer.substr(begin_of_channel_name + 1, end_of_channel_name - begin_of_channel_name );

    //frequency
    int start = marker + 5;
    marker = sBuffer.substr( start, channel_length - start ).find_first_of(":", bof);
    int frequency = atoi( sBuffer.substr(start, marker ).c_str());
    json_channel["freq"] = frequency;

    //modulation
    start += marker + 1;
    marker = sBuffer.substr( start, channel_length - start ).find_first_of(":", bof);
    string modulation = sBuffer.substr( start, marker );
    json_channel["mod"] = modulation;
    
    //source
    start += marker + 1;
    marker = sBuffer.substr( start, channel_length - start ).find_first_of(":", bof);
    string source = sBuffer.substr( start, marker );
    json_channel["src"] = source;

    //symbolrate
    start += marker + 1;
    marker = sBuffer.substr( start, channel_length - start ).find_first_of(":", bof);
    int symbol = atoi( sBuffer.substr( start, marker ).c_str() );
    json_channel["symb"] = symbol;

    //modulation details
    bool isDVB_S = false;
    string firstChar = modulation.substr( 0, 1 );
    json_channel["dvb_s2"] = false;
    json_channel["dvb_sat"] = false;
    string modPrefix = "";
    if (firstChar == "H" || firstChar == "V" || firstChar == "R" || firstChar == "L"){
        json_channel["dvb_sat"] = true;
        json_channel["dvb_sat_polarisation"] = firstChar;
        json_channel["_friendly_dvb_sat_band"] = "";
        if (firstChar == "H" || firstChar == "V" ){
            char friendly_band[120];
            string polarBand = "Horizontal";
            if (firstChar == "V")
                polarBand = "Vertical";
            string hilow = "undefined";
            if (frequency >= 11700 && frequency <= 12750)
                hilow = "High-Band";
            else if (frequency >= 10700 && frequency < 11700)
                hilow = "Low-Band";
            sprintf( friendly_band ,"%s: %s %s", source.c_str(), polarBand.c_str(), hilow.c_str());
            json_channel["_friendly_dvb_sat_band"] = friendly_band;
        }
        bool isDVB_S2 = modulation.find("S1", bof) != string::npos;
        if (isDVB_S2 == true){
            json_channel["dvb-s2"] = true;
            modPrefix = "DVB-S2:";
        }
        else{
            json_channel["mod"] = modulation;
            modPrefix = "DVB-S:";
        }
    }
    else if (source == "C"){
        modPrefix = "DVB-C:";
    }
    else if (source == "T"){
        modPrefix = "DVB-T:";
    }
    
    char friendly_mod[120];
    sprintf( friendly_mod ,"%s %s", modPrefix.c_str(), modulation.c_str());
    json_channel["_friendly_mod"] = friendly_mod;
    json_channel["mod"] = friendly_mod; //debug
    
    //human readable combined transponder infos
    char friendly_transp[120];
    sprintf( friendly_transp ,"%s / %d / %d", source.c_str(), frequency, symbol );
    json_channel["_friendly_transp"] = friendly_transp;

    //vpid + human readable channel type (radio / tv)
    start += marker + 1;
    marker = sBuffer.substr( start, channel_length - start ).find_first_of(":", bof);
    json_channel["vpid"] = sBuffer.substr( start, marker );
    json_channel["_friendly_type"] = (json_channel["vpid"] == "0") ? "Radio" : "TV";

    //apid (reused for human readable primary language)
    start += marker + 1;
    marker = sBuffer.substr( start, channel_length - start ).find_first_of(":", bof);
    string apid = sBuffer.substr( start, marker );
    json_channel["apid"] = apid;
    
    //human readable primary language
    string::size_type lang_marker_begin = apid.find_first_of("=", bof);
    string::size_type lang_marker_end = apid.find_first_of("@", bof);
    //FIXME: the right way to find the best lang id is to sort the audio ids first!!!
    if ( lang_marker_begin > 0 && lang_marker_begin < strlen( apid.c_str() ) 
            && lang_marker_end > 0 && lang_marker_end < strlen( apid.c_str() ) 
            && lang_marker_begin + 4 == lang_marker_end )
    {
        json_channel["_friendly_lang"] = apid.substr(lang_marker_begin + 1, lang_marker_end - lang_marker_begin -1);
        if (json_channel["_friendly_lang"] == "NAR" || json_channel["_friendly_lang"] == "und"){
            apid = apid.substr( lang_marker_end + 1,  strlen(apid.c_str()) - lang_marker_end );
            lang_marker_begin = apid.find_first_of("=", bof);
            lang_marker_end = apid.find_first_of("@", bof);
            if ( lang_marker_begin > 0 && lang_marker_begin < strlen( apid.c_str() ) 
                    && lang_marker_end > 0 && lang_marker_end < strlen( apid.c_str() ) 
                    && lang_marker_begin + 4 == lang_marker_end )
            {            
                json_channel["_friendly_lang"] = apid.substr(lang_marker_begin + 1, lang_marker_end - lang_marker_begin -1);
            }
            else
                json_channel["_friendly_lang"] = "?";
        }
    }
    else
        json_channel["_friendly_lang"] = "?";
    
    //tpid
    start += marker + 1;
    marker = sBuffer.substr( start, channel_length - start ).find_first_of(":", bof);
    json_channel["tpid"] = sBuffer.substr( start, marker );
    
    //caid + human readable encryption status
    start += marker + 1;
    marker = sBuffer.substr( start, channel_length - start ).find_first_of(":", bof);
    json_channel["caid"] = sBuffer.substr( start, marker );
    json_channel["_friendly_scrambled"] = (json_channel["caid"] == "0") ? "FTA" : "scrambled";
    
    //sid
    start += marker + 1;
    marker = sBuffer.substr( start, channel_length - start ).find_first_of(":", bof);
    json_channel["sid"] = atoi( sBuffer.substr( start, marker ).c_str() );

    //nid
    start += marker + 1;
    marker = sBuffer.substr( start, channel_length - start ).find_first_of(":", bof);
    json_channel["nid"] = atoi( sBuffer.substr( start, marker ).c_str());

    //tid
    start += marker + 1;
    marker = sBuffer.substr( start, channel_length - start ).find_first_of(":", bof);
    json_channel["tid"] = sBuffer.substr( start, marker );

    //rid
    start += marker + 1;
    marker = channel_length - start - 1; //last item, not : following
    json_channel["rid"] = atoi( sBuffer.substr( start, marker ).c_str() );

    return json_channel;
}

Json::Value filterJSONSingleChannelData( Json::Value json_channel){ 

    //channel group
    //json_channel.removeMember("_group");
    //channel number
    //json_channel.removeMember("_num");
    //channel provider
    //json_channel.removeMember("prov"); 
    //channel name
    //json_channel.removeMember("name");
    //frequency
    json_channel.removeMember("freq");
    //modulation
    //json_channel.removeMember("mod");
    //source
    json_channel.removeMember("src");
    //symbolrate
    json_channel.removeMember("symb");
    //human readable combined transponder infos
    //json_channel.removeMember("_friendly_transp");
    //vpid
    json_channel.removeMember("vpid");
    //human readable channel type (radio / tv)
    //json_channel.removeMember("_friendly_type");
    //apid
    json_channel.removeMember("apid");
    //human readable primary language
    //json_channel.removeMember("_friendly_lang");
    //tpid
    json_channel.removeMember("tpid");
    //caid 
    json_channel.removeMember("caid");
    //human readable encryption status
    //json_channel.removeMember("_friendly_scrambled");
    //sid
    json_channel.removeMember("sid");
    //nid
    json_channel.removeMember("nid");
    //tid
    json_channel.removeMember("tid"); 
    //rid
    json_channel.removeMember("rid");
    //json_channel.removeMember("_friendly_dvb_sat_band");
    json_channel.removeMember("dvb_s2");
    json_channel.removeMember("dvb_sat");
    json_channel.removeMember("dvb_sat_polarisation");
    
    return json_channel;
}

</%shared><%cpp>
reply.setHeader ("Cache-Control", "no-cache", false);
reply.setHeader ("Content-Type", "application/json", false);

//TODO: check if charset conversion is needed, we assume UTF-8

string svdrpCmdString = "/usr/bin/svdrpsend";

char svdrpcmd[120];
char buffer[1024];

if (command == "LSTC") // || command == "NEWC")
{
    sprintf( svdrpcmd, "%s LSTC :groups", svdrpCmdString.c_str() );

    if (FILE *stream = popen(svdrpcmd, "r"))
    {
        int counter = 0;
        int groupcounter = 0;
        string groupname = "default";
        char prefixed_groupname[120] = "000 default";
        Json::Value json_channels;
        
        while (!feof(stream))
        {
          if (fgets(buffer, sizeof(buffer), stream) != NULL)
          {
             int status = atoi(string(buffer).substr(0, 3).c_str());
             if ( status != 220 && status != 221 ) //don't output meta lines
             {
                 string sBuffer = string(buffer);
                 string::size_type bof = 0;
                 int channel_length = strlen(buffer) -1;
                 string::size_type begin_of_channel_name  = sBuffer.substr(4, channel_length -4 ).find_first_of(" ", bof) + 4;
                 int channel_nr = atoi(sBuffer.substr(4, begin_of_channel_name -4).c_str());
                 
                 //check if we have got a channel group label which always has channel_nr 0
                 if (channel_nr != 0)
                 {
                     json_channels[counter] = filterJSONSingleChannelData(
                         convertSingleRawChannelDataToJSON( buffer, channel_nr, begin_of_channel_name, prefixed_groupname)
                     );
                     counter ++;
                 }
                 else if (sBuffer.substr(begin_of_channel_name + 1,1) == ":")
                 {
                     if (groupcounter == 0) groupcounter =1 ; //if first group has a defined name it should not be group zero
                     //group zero only exists if no group exists (no group = default)
                     groupname = sBuffer.substr(begin_of_channel_name + 2, strlen(buffer) - begin_of_channel_name - 4);
                     sprintf( prefixed_groupname ,"%03d %s", groupcounter, groupname.c_str() );
                     
                     groupcounter++;
                     
                 }
             }
          }
        }
        pclose(stream);
        Json::Value json_channellist;
        json_channellist["channelList"] = json_channels;
        json_channellist["totalCount"]  = counter;
        reply.out() << json_channellist;
    }
}/*
else if (command == "CHAN"){
    int channel = atoi(param1.c_str());
    if ( channel > 0){  
        sprintf( svdrpcmd ,"%s CHAN %d", svdrpCmdString.c_str(), channel );
        if (FILE *stream = popen(svdrpcmd, "r")){
            while (!feof(stream)){
                if (fgets(buffer, sizeof(buffer), stream) != NULL){
                    reply.out() << buffer;
                }
            }
        }
    }
}
else if (command == "MOVC"){
    int channel_from = atoi( param1.c_str() );
    int channel_to = atoi( param2.c_str() );
    //....
}*/
else
    reply.out() << "Illegal command.";

</%cpp>

