<%pre>
#include <string>
#include <iostream>
#include <fstream>
#include <ctype.h>
#include <ClearSilver.h>
#include "../common.h"

#include <dirent.h>
#include <jsoncpp/json.h>

using namespace std;
</%pre>
<& authenticate >
<%cpp>
	reply.setHeader ("Cache-Control", "no-cache", false);
	reply.setHeader ("Content-Type", "application/json", false);

    unsigned char isDir =0x4;

    string current_inputlirc_path = "";
    string current_remote = "";
    string str;
    int index = 0;
    int current_lirchw_id = -1;
    HDF *hdf = NULL;
    NEOERR *err;
  
    DIR *dp;
    struct dirent *ep;

    int findex = 0;

    //get current inputlirc settings from database
    if (((err = hdf_init(&hdf)) != STATUS_OK) || ((err = hdf_read_file(hdf, YAVDRDB)) != STATUS_OK))
    {
        nerr_log_error(err);
    }
    else
    {
        current_inputlirc_path = hdf_get_value(hdf, "system.inputlirc.path", "");
        current_remote         = hdf_get_value(hdf, "system.remoted", "");
    }

    Json::Value list;
    list[0u][0u] = "";
    list[0u][1u] = "-";
    
    int next = 1;
    ifstream f("/proc/bus/input/devices", ios::in);
    string line = "", name = "", event = "";
    while (!f.eof())
    {
        getline(f, line);        // Lese eine Zeile
        if (line != "") {
            if (line.substr(0,2) == "N:") {
                name = line.substr(9, line.length()-10);
            }
            else if(line.substr(0,2) == "H:")
            {
                string buf; // Have a buffer string
                stringstream ss(line.substr(12)); // Insert the string into a stream

                vector<string> tokens; // Create vector to hold our words

                while (ss >> buf) {
                    if (buf.substr(0,5) == "event")
                        event = buf;
                }
            } 
        }
        else
        {
            if (event != "" && name != "") {
    			DIR *Dir;
    			struct dirent *DirEntry;

    			Dir = opendir("/dev/input/by-id/");

    			string pathById = "";
    			while(DirEntry = readdir(Dir))
    			{
    				if ( DirEntry->d_type == DT_LNK )
    				{
    					char filename[256];
    					char buffer[256];
    					sprintf(filename, "/dev/input/by-id/%s", DirEntry->d_name);
    					int len = readlink(filename, buffer, 256);
    					if (len >= 0) {
    						buffer[len] = 0;
    						string symLink = string(buffer);
    						symLink = symLink.substr( symLink.size() - event.size());

    						if (symLink == event) {
    							pathById = string(filename);
    							break;
    						}
    					}
    				}
    			}
    			if (pathById != "") {
    				list[next][0u] = pathById;
    				list[next][1u] = name;
                    next++;
    			}

                event = "";
                name = "";
            }
        }
    }
    f.close(); // Datei wieder schlie√üen
    
    Json::Value json;
    json["receiverlist"] = list;
    json["current_receiver"] = current_inputlirc_path;
    json["current_remoted"] = current_remote;
    reply.out() << json;

</%cpp>
