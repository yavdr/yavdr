<%pre>
#include <stdlib.h>
#include <string>
#include <ctype.h>

extern "C" {
#include <ClearSilver.h>
};

#include "common.h"

using namespace std;
</%pre><& authenticate ><%args>
  //Default type of args is string and we should leave it like this
  //For more robustness, avoid to define integer vars in here, better cast string to int later!!!
  signal;
  value;
  value2;
</%args><%cpp>

string success = "false";

if (
        (signal == "reboot") || 
        (signal == "change-frontend") || 
        (signal == "change-shutdown") || 
        (signal == "kill-xbmc") || 
        (signal == "restart-vdr") ||
        (signal == "change-auto-net-yavdr") ||
        (signal == "change-overscan-compensation") ||
        (signal == "change-timeout") ||
        (signal == "graphtft-state-change")
    )
{
    
    if (signal == "change-frontend" )
    {
        if ((value == "xine") || (value == "xineliboutput") || (value == "xbmc"))
        {
            NEOERR *err;
            HDF *hdf = NULL;
            if (((err = hdf_init(&hdf)) != STATUS_OK) || ((err = hdf_read_file(hdf, YAVDRDB)) != STATUS_OK))
            {
              nerr_log_error(err);
            }
            err = hdf_set_valuef(hdf, "vdr.frontend=%s", value.c_str());
            /*if (err != STATUS_OK){
            }*/
            err = hdf_write_file(hdf, YAVDRDB);
            if (err != STATUS_OK)
            {
              nerr_log_error(err);
            }
            hdf_destroy(&hdf);
        }
    }
    else if (signal == "change-shutdown" )
    {
        if ((value == "s3") || (value == "s5") || (value == "poweroff") || (value == "reboot"))
        {
            NEOERR *err;
            HDF *hdf = NULL;
            if (((err = hdf_init(&hdf)) != STATUS_OK) || ((err = hdf_read_file(hdf, YAVDRDB)) != STATUS_OK))
            {
              nerr_log_error(err);
            }
            err = hdf_set_valuef(hdf, "system.shutdown=%s", value.c_str());
            /*if (err != STATUS_OK){
            }*/
            err = hdf_write_file(hdf, YAVDRDB);
            if (err != STATUS_OK)
            {
              nerr_log_error(err);
            }
            hdf_destroy(&hdf);
        }
    }
    else if (signal == "change-overscan-compensation" )
    {
        int overscanval = atoi(value.c_str());
        if (overscanval > 0 && overscanval < 256)
        {
            NEOERR *err;
            HDF *hdf = NULL;
            if (((err = hdf_init(&hdf)) != STATUS_OK) || ((err = hdf_read_file(hdf, YAVDRDB)) != STATUS_OK))
            {
              nerr_log_error(err);
            }
            err = hdf_set_valuef(hdf, "system.hardware.nvidia.overscan=%i", overscanval);
            /*if (err != STATUS_OK){
            }*/
            err = hdf_write_file(hdf, YAVDRDB);
            if (err != STATUS_OK)
            {
              nerr_log_error(err);
            }
            hdf_destroy(&hdf);
        } 
    }
    else if (signal == "change-timeout" )
    {
        int timeoutval = atoi(value.c_str());
        if (timeoutval >= 0 && timeoutval <= 10)
        {
            NEOERR *err;
            HDF *hdf = NULL;
            if (((err = hdf_init(&hdf)) != STATUS_OK) || ((err = hdf_read_file(hdf, YAVDRDB)) != STATUS_OK))
            {
              nerr_log_error(err);
            }
            err = hdf_set_valuef(hdf, "system.grub.timeout=%i", timeoutval);
            /*if (err != STATUS_OK){
            }*/
            err = hdf_write_file(hdf, YAVDRDB);
            if (err != STATUS_OK)
            {
              nerr_log_error(err);
            }
            hdf_destroy(&hdf);
        }
    }
    else if (signal == "graphtft-state-change")
    {
        if ((value == "") || (value == "1"))
        {
            NEOERR *err;
            HDF *hdf = NULL;
            if (((err = hdf_init(&hdf)) != STATUS_OK) || ((err = hdf_read_file(hdf, YAVDRDB)) != STATUS_OK))
            {
              nerr_log_error(err);
            }
            err = hdf_set_valuef(hdf, "vdr.plugin.graphtft.enabled=%s", (value == ""?"0":"1"));
            /*if (err != STATUS_OK){
            }*/
            err = hdf_write_file(hdf, YAVDRDB);
            if (err != STATUS_OK)
            {
              nerr_log_error(err);
            }
            hdf_destroy(&hdf);
        }
    }

    string cmd = "/usr/bin/signal-event " + signal;
    int ret = system( cmd.c_str());
    success = "true"; //TODO: use ret to find out if we were successful.
}
</%cpp>{
    success: <$success$>
}
