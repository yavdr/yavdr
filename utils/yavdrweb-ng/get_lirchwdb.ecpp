<%pre>
#include <string>
#include <iostream>
#include <fstream>
#include <ctype.h>
#include <ClearSilver.h>
#include "../common.h"

using namespace std;
</%pre>
<& authenticate >
<%cpp>

  string current_lirchw_description = "";
  string current_serial_port = "";
  string str;
  int index = 0;
  int current_lirchw_id = -1;
  HDF *hdf = NULL;
  NEOERR *err;

  //get current lirc settings from database
  if (((err = hdf_init(&hdf)) != STATUS_OK) || ((err = hdf_read_file(hdf, YAVDRDB)) != STATUS_OK))
  {
    nerr_log_error(err);
  }
  else
  {
    current_lirchw_description = hdf_get_value(hdf, "system.lirchw.description", "");
    current_serial_port        = hdf_get_value(hdf, "system.lirchw.serial_port", "");
  }
  

  ifstream ifs("/usr/share/lirc/lirc.hwdb", ifstream::in);

  reply.out() << "\n{\n                \"receiverlist\" : [\n";
  
  while (ifs.good())
  {
    getline(ifs, str); 

    if (isalpha(str[0]))
    {
      //end of line comma, should not be added on last line because of msie
      if (index > 0)
          reply.out() << ",\n";
      
      string::size_type bof = 0;
      string::size_type found;

      for (int i = 0; i < 5; i++)
      {
        found = str.find_first_of(";", bof);

        if (current_lirchw_description != "" && str.substr(bof, found - bof) == current_lirchw_description)
          current_lirchw_id = index;

        if (i == 0)
          reply.out() << "                    [ " << index << ",";

        reply.out()  << " \""; 
        reply.sout() << str.substr(bof, found - bof); //we must escape special chars via sout (xss)
        reply.out()  << "\""
                     << (i == 4 ? " ]" : ",");
        bof = found + 1;
      }
      index++;
    }
  }

  ifs.close();

  reply.out() << "                ],\n"
              << "                \"current_receiver\" : ";
  reply.sout()<< current_lirchw_id;  //we must escape special chars via sout (xss)
  reply.out() << ",\n"
              << "                \"current_serial_port\" : \"";
  reply.sout()<< current_serial_port;  //we must escape special chars via sout (xss)
  reply.out() << "\"\n}\n";

</%cpp>
