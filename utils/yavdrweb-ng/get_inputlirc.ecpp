<%pre>
#include <string>
#include <iostream>
#include <fstream>
#include <ctype.h>
#include <ClearSilver.h>
#include "../common.h"
#include <stddef.h>
#include <stdio.h>
#include <sys/types.h>
#include <dirent.h>

using namespace std;
</%pre>
<& authenticate >
<%cpp>
    reply.setHeader ("Cache-Control", "no-cache", false);

    unsigned char isDir =0x4;

    string current_inputlirc_path = "";
    string current_remote = "";
    string str;
    int index = 0;
    int current_lirchw_id = -1;
    HDF *hdf = NULL;
    NEOERR *err;
  
    DIR *dp;
    struct dirent *ep;

    int findex = 0;

    //get current inputlirc settings from database
    if (((err = hdf_init(&hdf)) != STATUS_OK) || ((err = hdf_read_file(hdf, YAVDRDB)) != STATUS_OK))
    {
        nerr_log_error(err);
    }
    else
    {
        current_inputlirc_path = hdf_get_value(hdf, "system.inputlirc.path", "");
        current_remote         = hdf_get_value(hdf, "system.remote", "");
    }
  
    reply.out() << "\n{\n                \"receiverlist\" : [\n";
    reply.out() << "                    [ \"\", \"-\" ]\n"; // no receiver, reset settings

/*
    dp = opendir ("/dev/input/by-path/");
    if (dp != NULL)
    {
        while (ep = readdir (dp))
        {
            if (ep->d_type != isDir) {
                reply.out() << "                    ,[ \"/dev/input/by-path/";
                reply.sout()<< ep->d_name;
                reply.out() << "\", \"";
                reply.sout()<< ep->d_name;
                reply.out() << "\" ]\n";
            }
        }
        (void) closedir (dp);
    }
    */
    
    ifstream f("/proc/bus/input/devices", ios::in);
    string line = "", name = "", event = "";
    while (!f.eof())
    {
        getline(f, line);        // Lese eine Zeile
        if (line != "") {
            if (line.substr(0,2) == "N:") {
                name = line.substr(9, line.length()-10);
            }
            else if(line.substr(0,2) == "H:")
            {
                string buf; // Have a buffer string
                stringstream ss(line.substr(12)); // Insert the string into a stream

                vector<string> tokens; // Create vector to hold our words

                while (ss >> buf) {
                    if (buf.substr(0,5) == "event")
                        event = buf;
                }
            } 
        }
        else
        {
            if (event != "" && name != "") {
                reply.out() << "                    ,[ \"/dev/input/";
                reply.sout()<< event;
                reply.out() << "\", \"";
                reply.sout()<< name;
                reply.out() << "\" ]\n";
                event = "";
                name = "";
            }
        }
    }
    f.close();                // Datei wieder schlieÃŸen
    
    reply.out() << "                ],\n"
                << "                \"current_receiver\" : \"";
    reply.sout()<< current_inputlirc_path;  //we must escape special chars via sout (xss)
    reply.out() << "\",\n"
              << "                \"current_remote\" : \"";
    reply.sout()<< current_remote;  //we must escape special chars via sout (xss)
    reply.out() << "\"\n}\n";

</%cpp>
