<%pre>
#include <stdlib.h>
#include <string>
#include <iostream>
#include <fstream>
#include <ctype.h>
extern "C" {
#include <ClearSilver.h>
};

#include "common.h"

using namespace std;
</%pre><& authenticate ><%args>
  //Default type of args is string and we should leave it like this
  //For more robustness, avoid to define integer vars in here, better cast string to int later!!!
  receiver_id;
  serial_port;
</%args><%cpp>
  int i_receiver_id = -1;
  string str;
  int index = 0;
  string success = "false";
  string msg = "Unspecified error.";
  const char *files[] = {
    "/usr/share/lirc/lirc.hwdb",
    "/usr/share/lirc/extras/more_remotes.hwdb"
  };
  int findex = 0;
  bool remote_found = false;

  if (receiver_id != "")
  {
      //security check for plausible value of serial_port
      if (serial_port != "/dev/ttyS0" || serial_port != "/dev/ttyS1")
          serial_port = "";

      i_receiver_id = atoi(receiver_id.c_str()); 
    //FIXME msg is not used correctly here, it should be a field specific feedback for the end user
    //and is abused as a cheap debug instrument

    const char *names[] = {"description", "driver", "lirc_driver", "hw_default", "lircd_conf"};

    ifstream ifs;

    for (findex = 0; (findex < (sizeof(files) / sizeof(files[0]))) && !remote_found; findex++)
    {
      ifs.open(files[findex], ifstream::in);

      while (ifs.good())
      {
        getline(ifs, str); 

        if (isalpha(str[0]))
        {
          if (index == i_receiver_id)
          {
            string::size_type bof = 0;
            string::size_type found;
            NEOERR *err;
            HDF *hdf = NULL;
            remote_found = true;

            if (((err = hdf_init(&hdf)) != STATUS_OK) || ((err = hdf_read_file(hdf, YAVDRDB)) != STATUS_OK))
            {
              nerr_log_error(err);
              msg = "Error on hdf_init / hdf_read_file";
              break;
            }
            for (int i = 0;(found = str.find_first_of(";", bof)) != string::npos; i++)
            {
              string value = str.substr(bof, found - bof);
              err = hdf_set_valuef(hdf, "system.lirchw.%s=%s", names[i], value.c_str());
              if (err != STATUS_OK){
                msg = "Error on hdf_set_value";
                break;
              }
              //check if this lirc receiver really depends on the serial port
              if ((i == 1 && value.c_str() == "lirc_dev lirc_serial") ||
                  (i == 2 && value.c_str() == "serial"))
              {
                  err = hdf_set_valuef(hdf, "system.lirchw.serial_port=%s", serial_port.c_str());
                  if (err != STATUS_OK){
                    msg = "Error on hdf_set_value";
                    break;
                  }
              }
              else
              {
                  //the chosen receiver is not a serial receiver, so clear this field in the db
                  err = hdf_set_valuef(hdf, "system.lirchw.serial_port=%s", "");
                  if (err != STATUS_OK){
                    msg = "Error on hdf_set_value";
                    break;
                  }
              }
              bof = found + 1;
            }
            if  ((err != STATUS_OK) || (err = hdf_write_file(hdf, YAVDRDB)) != STATUS_OK)
            {
              nerr_log_error(err);
              msg = "Error on hdf_write_file";
            }
            else
            {
               int ret = system("/usr/bin/signal-event change-lirc-hardware");
               success = "true";
               msg = "OK. signal-event lirchw-changed";
            }
            hdf_destroy(&hdf);
            break;
          }
          index++;
        }
      }
      ifs.close();
    }
  }
  else
  {
     msg = "Illegal request parameters";
  }
</%cpp>{
    success: <$success$>
/*    errors: {
        receiver_id: "<$msg$>"
    }
*/
}
