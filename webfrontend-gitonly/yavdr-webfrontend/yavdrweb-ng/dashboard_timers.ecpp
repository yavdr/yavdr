<%pre>
#include <stdio.h>
#include <time.h>
#include <string>
#include <cstring>
#include <jsoncpp/json.hpp>
#include <time.h>
#include "curl/curl.h"

#include <algorithm>
#include <vector>

using namespace std;

</%pre><& authenticate ><%shared>
/*
typedef struct yavdr_timer_s {
    time_t timestamp;
    svdrp_timer_t timer;
} yavdr_timer_t;

bool compareTimer (yavdr_timer_t i, yavdr_timer_t j) {
	return (i.timestamp<j.timestamp);
}
*/
// This is the writer call back function used by curl  
static int writer(char *data, size_t size, size_t nmemb,  
				  std::string *buffer)  
{  
  // What we will return  
  int result = 0;  
  
  // Is there anything in the buffer?  
  if (buffer != NULL)  
  {  
	// Append the data to the buffer  
	buffer->append(data, size * nmemb);  
  
	// How much did we write?  
	result = size * nmemb;  
  }  
  
  return result;  
}  
</%shared><%cpp>
	reply.setHeader ("Cache-Control", "no-cache", true);
	reply.setHeader ("Content-Type", "application/json", true);

	Json::Value json;

	json["metaData"]["root"]  = "data";
	json["metaData"]["idProperty"]  = "id";
	json["metaData"]["totalProperty"]  = "total";

	json["metaData"]["fields"][0u]["name"] = "id";
	json["metaData"]["fields"][0u]["type"] = "integer";

	json["metaData"]["fields"][1u] = "channel";
	json["metaData"]["fields"][2u] = "name";

	json["metaData"]["fields"][3u]["name"] = "first_date";
	json["metaData"]["fields"][3u]["type"] = "date";

	json["metaData"]["fields"][4u]["name"] = "is_active";
	json["metaData"]["fields"][4u]["type"] = "bool";

	json["metaData"]["fields"][5u]["name"] = "is_instant";
	json["metaData"]["fields"][5u]["type"] = "bool";

	json["metaData"]["fields"][6u]["name"] = "is_recording";
	json["metaData"]["fields"][6u]["type"] = "bool";

	json["metaData"]["fields"][7u]["name"] = "repeating";
	json["metaData"]["fields"][7u]["type"] = "bool";

	json["metaData"]["fields"][8u]["name"] = "use_vps";
	json["metaData"]["fields"][8u]["type"] = "bool";

	json["metaData"]["fields"][9u]["name"] = "lifetime";
	json["metaData"]["fields"][9u]["type"] = "integer";

	json["metaData"]["fields"][10u]["name"] = "priority";
	json["metaData"]["fields"][10u]["type"] = "integer";

	json["metaData"]["fields"][11u]["name"] = "start";
	json["metaData"]["fields"][11u]["type"] = "date";
	
	json["metaData"]["fields"][12u]["name"] = "stop";
	json["metaData"]["fields"][12u]["type"] = "date";

	CURL *curl;
	CURLcode curlResult;
    // Create our curl handle  
    curl = curl_easy_init();  
    
    if (curl)  
    {
    	char errorBuffer[CURL_ERROR_SIZE];  
    	string buffer;

        // Now set up all of the curl options  
        curl_easy_setopt(curl, CURLOPT_ERRORBUFFER, errorBuffer);  
        
        curl_easy_setopt(curl, CURLOPT_HEADER, 0);  
        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1);  
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, writer);  
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &buffer);
        
		curl_easy_setopt(curl, CURLOPT_URL, "http://localhost:8002/timers.json");
		// Attempt to retrieve the remote page
		curlResult = curl_easy_perform(curl);  

		// Always cleanup  
		curl_easy_cleanup(curl);  
		
		// Did we succeed?  
		if (curlResult == CURLE_OK)
		{  
			Json::Value source;   // will contains the root value after parsing.
			Json::Reader reader;
			bool parsingSuccessful = reader.parse( buffer, source );
			const Json::Value timers = source["timers"];
			
		    if( timers.size() > 0 ) {
		    	json["total"] = timers.size();
			    // so sieht dann data aus
				// [{ id: 0, name: 'Der Film', length: 123, information: 'text' }]
		    	
		    	int i = 0;
				for( Json::ValueIterator itr = timers.begin() ; itr != timers.end() ; itr++, i++ ) {
					json["data"][i]["id"] = i;
					json["data"][i]["name"] = (*itr)["filename"];
					json["data"][i]["channel"] = (*itr)["channelname"];
					json["data"][i]["first_date"] = "";
					json["data"][i]["is_active"] = false;
							
					json["data"][i]["start"] = (*itr)["start"];
					json["data"][i]["stop"] = (*itr)["stop"];
				}
		    }
		} else {
			json["data"] = false;
			json["total"] = 0;
		}

    } else {
    	json["data"] = false;
    	json["total"] = 0;
    }
    /*
	svdrp_t *svdrp;

	svdrp = svdrp_open("192.168.6.253", 6419, SVDRP_DEFAULT_TIMEOUT, SVDRP_MSG_VERBOSE);
	if(svdrp_is_connected(svdrp)) {
		struct tm tm = {0};
		struct tm * timeinfo;

		yavdr_timer_t *yaTimer;
		int timer_id = 0;
		int ret = 0;
		char time_str[256];
		int option = -1;
		char *start;
		time_t ts;

		int i = 0;

		std::vector<yavdr_timer_t> vec;

		yaTimer = new yavdr_timer_t; //malloc(sizeof yavdr_timer_t);

		while (ret = svdrp_get_timer(svdrp, timer_id+1, &(yaTimer->timer)) == SVDRP_OK) {

			if (yaTimer->timer.first_date != NULL) {
				strptime(yaTimer->timer.first_date, "%Y-%m-%d", &tm);
				ts = mktime(&tm);
			} else {
				ts = time(NULL);
			}

			printf(" i: %s \n ", asctime(localtime(&ts)));

			string start = string(yaTimer->timer.start);
			string stop = string(yaTimer->timer.stop);

			ts += atoi(start.substr(0,2).c_str()) * 3600 + atoi(start.substr(2,2).c_str()) * 60;
			printf(" i: %s \n ", asctime(localtime(&ts)));
			yaTimer->timestamp = ts;

			vec.push_back(*yaTimer);

/*			Json::Value timerStore;

			timerStore["id"] = timer.id;
			timerStore["channel"] = timer.channel;
			if (timer.first_date == NULL) {
				timerStore["first_date"] = NULL;
			} else {
				timerStore["first_date"] = timer.first_date;
			}
			timerStore["start"] = timer.start;
			timerStore["stop"] = timer.stop;
			timerStore["repeating"] = timer.repeating;
			timerStore["is_active"] = timer.is_active;
			timerStore["is_recording"] = timer.is_recording;
			timerStore["is_instant"] = timer.is_instant;
			timerStore["use_vps"] = timer.use_vps;
			timerStore["priority"] = timer.priority;
			timerStore["lifetime"] = timer.lifetime;
			timerStore["name"] = timer.file;
			//timerStore["data"] = timer.data;

			json["data"][i++] = timerStore;*/
/*			timer_id++;
			yaTimer = new yavdr_timer_t;
		}

		std::sort(vec.begin(), vec.end(), compareTimer );
		svdrp_close(svdrp);
		//json["data"] = vec;
		json["total"] = timer_id;
	} else {
		json["total"] = 0;
		json["data"] = "";
	}*/

	reply.out() << json;

</%cpp>
