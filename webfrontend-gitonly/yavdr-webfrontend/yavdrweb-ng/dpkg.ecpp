<%pre>
#include <stdio.h>
#include <string>
#include <fstream>

#include <fcntl.h> // for open()
#include <cerrno> // for errno
#include <cstdio> // for perror()

using namespace std;
</%pre><%args>
command;
package;
</%args><%shared>

bool isFileLocked(const std::string& fileName)
{
  int fd;
  fd=open(fileName.c_str(), O_RDWR | O_CREAT | O_NOFOLLOW, 0640);
  if (fd < 0)
  {
	close(fd);
    return true;
  }

  // Aquire a write lock
  struct flock fl;
  fl.l_type = F_WRLCK;
  fl.l_whence = SEEK_SET;
  fl.l_start = 0;
  fl.l_len = 0;
  if (fcntl(fd, F_SETLK, &fl) == -1)
  {
    close(fd);
	return true;
  }
  // if we got here, we own the lock
  close(fd);
  return false;
}

</%shared><%cpp>
reply.setHeader ("Cache-Control", "no-cache", false);

//restrict commands

if (command == "install" ||
        command == "update" ||
        command == "remove" ||
        command == "autoremove" ||
        command == "clean")
{
    string cmd = "";
    bool lockNeeded = true;
    if (command == "install")
       cmd = "apt-get -y install "+ package;
    else if (command == "remove")
       cmd = "apt-get -y remove "+ package;
    else if (command == "update")
    {
        cmd = "apt-get update";
        lockNeeded = false;
    }
    else if (command == "autoremove")
        cmd = "apt-get -y autoremove";
    else if (command == "clean")
        cmd = "apt-get -y clean";

    cmd += " 2>&1";

    reply.setDirectMode(200, "OK");

    reply.out() << "<html><head>"
    		<< "<link rel=\"stylesheet\" type=\"text/css\" href=\"/static/stylesheets/dpkg.css\" />"
    		<< "<body>\n";
    reply.out().flush();

    if (!lockNeeded || !isFileLocked("/var/cache/apt/archives/lock")) {
      if (FILE *stream = popen(cmd.c_str(), "r"))
      {
        char buffer[1024];
        while (!feof(stream))
        {
          if (fgets(buffer, sizeof(buffer), stream) != NULL)
          {
               reply.out() << string(buffer).substr(0, strlen(buffer) - 1 ); //we must escape special chars via sout (xss)
               reply.out() << "<br />\n";
               reply.out().flush();
          }
        }
        reply.out() << "<br />\n";
        reply.out() << "--------------------<br />\n";
        reply.out() << "- finished         -<br />\n";
        reply.out() << "--------------------<br />\n";
        
        pclose(stream); 
      }
    }
    else
    {
      reply.out() << "can't get lock.";
    }
    reply.out() << "</body></html>\n";
    reply.out().flush();
}
else if (command == "locked")
{

}
else
    reply.out() << "Illegal command.";

</%cpp>

